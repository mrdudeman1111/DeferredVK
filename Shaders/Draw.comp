#version 440

// sources used:
// https://github.com/KhronosGroup/Vulkan-Samples/tree/main/samples/performance/multi_draw_indirect
// https://medium.com/@Lucmomber/two-pass-hierarchical-z-buffer-occlusion-culling-93171c5a9808
// https://github.com/SaschaWillems/Vulkan/blob/master/examples/indirectdraw
// https://docs.vulkan.org/samples/latest/samples/performance/multi_draw_indirect/README.html

#define MAX_RENDERABLE_INSTANCES 600

layout(local_size_x = 64) in;

struct VkDrawCommand
{
    uint IndexCount;
    uint InstanceCount;
    uint FirstIndex;
    int VertexOffset;
    uint FirstInstance;
};

struct CullBox
{
    vec2 Vertices[4];
};

struct CullBounds
{
    float Width;
    float Height;
};

 // scene globals and draw commands buffer
layout(set = 0, binding = 0) uniform Cam_t
{
    mat4 View;
    mat4 Proj;
    mat4 ProjView;
    vec4 Planes[6];
} Camera;

// static scene elements
layout(std430, set = 0, binding = 1) buffer readonly StaticBuff
{
    mat4 Transforms[];
    //uint IDs[];
} StatSceneBuffer;

// dynamic scene elements
layout(std430, set = 0, binding = 2) buffer readonly DynamicBuff
{
    mat4 Transforms[];
} DynSceneBuffer;

//layout(std140, set = 0, binding = 3) buffer readonly globInstBounds
// {
//     CullBounds Bounds[];
// } Bounds;

layout(std430, set = 1, binding = 0) buffer Draw_t
{
    VkDrawCommand Cmd; // out

    uint MeshBounds; // in
    uint InstanceCount; // in

    uint InstanceSceneIndices[MAX_RENDERABLE_INSTANCES]; // in // maps MeshInstances[gl_InstanceIndex] to the scene object/instance to be rendered. (in other words use InstanceSceneIndex[MeshInstances[gl_InstanceIndex]] to get the index of the mesh transform in scene buffer.)
    uint VisibleInstances[]; // out // maps the instance (gl_InstanceIndex) to the instance to be rendered. (While mesh X might have instances at scene index 3, 5, 6, 12, 19, and 31, most of these get culled. So rendered meshes, instances that haven't been culled, are stored here.)
} Mesh;

// idea : instead of mapping gl_InstanceIndex to be drawn, map the meshe's scene index.

void FrustrumCull(mat4 Mat, mat4 ModelTransform)
{
    // for(uint i = 0; i < )
}

void main()
{
    uint id = gl_GlobalInvocationID.x;

    if(id >= Mesh.InstanceCount)
    {
        Mesh.VisibleInstances[id] = 9999999;
        return;
    }

    Mesh.VisibleInstances[Mesh.Cmd.InstanceCount] = Mesh.InstanceSceneIndices[id];
    Mesh.Cmd.InstanceCount = Mesh.Cmd.InstanceCount+1;

    return;
}
